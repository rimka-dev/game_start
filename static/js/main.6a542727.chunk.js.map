{"version":3,"sources":["starsDisplay/imgStart.png","button/ButtonNumber.js","starsDisplay/StarsDisplay.js","playAgain/PlayAgain.js","useGameState/useGameState.js","startMatch/StartMatch.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","ButtonNumber","props","react_default","a","createElement","className","style","backgroundColor","available","used","wrong","candidate","status","onClick","number","StarsDisplay","min","max","count","Array","from","length","_","i","map","starId","key","src","start","alt","PlayAgain","margin","color","gameStatus","useGameState","utils","sum","arr","reduce","acc","curr","range","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","_useState","useState","_useState2","Object","slicedToArray","stars","setStars","_useState3","_useState4","availableNums","SetAvailableNums","_useState5","_useState6","candidateNums","SetCandidateNums","_useState7","_useState8","secondsLeft","setSecondsLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","StartMatch","_useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","cn","playAgain_PlayAgain","startNewGame","starsDisplay_StarsDisplay","button_ButtonNumber","App","gameId","setGameId","src_startMatch_StartMatch","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6a542727.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgStart.25c84cb0.png\";","import './Button.css';\r\nimport React from 'react';\r\n\r\nfunction ButtonNumber (props) {\r\n    // color theme\r\nconst colors = {\r\n    available:'lightgray',\r\n    used:'lightgreen',\r\n    wrong:'lightcoral',\r\n    candidate:'deepskyblue',\r\n};\r\n    return (  \r\n        <button className=\"number\" style={{backgroundColor: colors[props.status]}} \r\n        onClick={()=> props.onClick(props.number, props.status)}>\r\n            {props.number}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default ButtonNumber;","import start from './imgStart.png';\r\nimport React from 'react';\r\n//import _ from \"lodash\";\r\nimport './StarsDispay.css';\r\nfunction StarsDisplay (props) {\r\n    const range = (min,max) => Array.from({length: max - min +1}, (_, i) => min + i);\r\n    return ( \r\n        range(1, props.count ).map(starId => <div key={starId} className=\"start\"><img src={start} alt=\"star\" /></div>) \r\n     );\r\n}\r\n\r\nexport default StarsDisplay ;","import './PlayAgain.css'\r\nimport React from 'react';\r\n\r\nfunction PlayAgain(props) {\r\n    return ( \r\n        <div className='playAgain'>\r\n            <div style={{margin:\"10px\", color: props.gameStatus === 'lost'?'red':'green' }}>\r\n               <h2>{props.gameStatus === 'lost'? 'Game Over !': `You win!`}</h2> \r\n            </div>\r\n            <button onClick={props.onClick} className='btnPlay'>Play Again</button>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default PlayAgain ;","import { useEffect, useState } from 'react';\r\n\r\n// this is Ã  custom hook\r\nfunction useGameState() {\r\n    //===== Math science ===========\r\n    const utils = {\r\n        // Sum an array\r\n        sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n        // create an array of numbers between min and max (edges included)\r\n        range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n        // pick a random number between min and max (edges included)\r\n        random: (min, max) => min + Math.floor(max * Math.random()),\r\n        // Given an array of numbers and a max ...\r\n        // Pick a random sum (< max) from the set of all available sums in arr\r\n        randomSumIn: (arr, max) => {\r\n            const sets = [[]];\r\n            const sums = [];\r\n            for (let i = 0; i < arr.length; i++) {\r\n                for (let j = 0, len = sets.length; j < len; j++) {\r\n                    const candidateSet = sets[j].concat(arr[i]);\r\n                    const candidateSum = utils.sum(candidateSet);\r\n                    if (candidateSum <= max) {\r\n                        sets.push(candidateSet);\r\n                        sums.push(candidateSum);\r\n                    }\r\n                }\r\n            }\r\n            return sums[utils.random(0, sums.length)];\r\n        }\r\n    };\r\n\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, SetAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, SetCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(20);\r\n\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n    const setGameState = (newCandidateNums) => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            SetCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            SetAvailableNums(newAvailableNums);\r\n            SetCandidateNums([]);\r\n\r\n        }\r\n    }\r\n\r\n    return { stars, availableNums, candidateNums, secondsLeft, utils, setGameState };\r\n}\r\n\r\nexport default useGameState;","import './StartMatch.css';\r\nimport React from 'react';\r\nimport ButtonNumber from '../button/ButtonNumber';\r\nimport StarsDisplay from '../starsDisplay/StarsDisplay';\r\nimport PlayAgain from '../playAgain/PlayAgain';\r\nimport useGameState from '../useGameState/useGameState';\r\nconst StartMatch = (props)=> {\r\n   const {\r\n    stars,\r\n    availableNums,\r\n    candidateNums,\r\n    secondsLeft,\r\n    utils,\r\n    setGameState,\r\n   } = useGameState()\r\n \r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    // const gameIsDone = availableNums.length === 0;\r\n    // const gameIsLost = secondsLeft === 0;\r\n    const gameStatus = availableNums.length === 0 ? 'won' : secondsLeft === 0 ? 'lost':'active';\r\n\r\n    const numberStatus = (number)=>{\r\n        if (!availableNums.includes(number)) {\r\n            return 'used'\r\n        }\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong':'candidate';\r\n        }\r\n        return 'available' \r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus)=>{\r\n        if (gameStatus !== 'active' || currentStatus === 'used') {\r\n            return;\r\n        }\r\n        const newCandidateNums = currentStatus === 'available' \r\n        ? candidateNums.concat(number) : \r\n        candidateNums.filter(cn => cn !== number);\r\n        setGameState(newCandidateNums);\r\n    };\r\n\r\n    return (  \r\n        <div className=\"game\">\r\n            <div className=\"help\">\r\n                Pick 1 or more numbers that sum to the number of stars\r\n            </div>\r\n            <div className=\"body\">\r\n                <div className=\"left\">\r\n                    {\r\n                      gameStatus !=='active' ? (\r\n                        <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\r\n                      ):\r\n                      (<StarsDisplay count={stars}/>) \r\n                    }\r\n                </div>\r\n                <div className=\"right\">\r\n                    {\r\n                        utils.range(1, 9).map(number => \r\n                        <ButtonNumber key={number} \r\n                        number ={number}\r\n                        status={numberStatus(number)}\r\n                        onClick={onNumberClick}\r\n                        \r\n                        />)\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n            <div className=\"timer\">Time Remaining :&nbsp; <b>{secondsLeft}</b> </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StartMatch ;","import { useState } from 'react';\nimport React from 'react';\nimport './App.css';\nimport StartMatch from './startMatch/StartMatch';\n\n\nfunction App() {\n  const [gameId, setGameId] = useState(1);\n  return (\n    <div className=\"App\">\n      <h1>Star Game</h1>\n      <StartMatch key={gameId} startNewGame={()=> setGameId(gameId +1)} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}